---
layout:     post
title:      Burrow Rainbow
author:     Haibin
tags:		github kafka go
subtitle:  	Burrow service provides visibility for Apache Kafka users
category:  projects
---
## Burrow Rainbow
- The original [Burrow](https://github.com/linkedin/Burrow) is a Lag monitoring service for Apache Kafka. 
- With goRainbow, [Burrow Rainbow](https://github.com/HarbinZhang/goRainbow) provides more visibility for users. 
    - Producer status: for each producer, how many records produced to each partition.
    - Consumer status: for each consumer, which partition(s) are hosted and how many records consumed per minute.
    - Lag: total lag in the whole consumer group and partition level lag.  

### What is Lag
Basically, the lag = offset produced by producer - offset consumed by consumer.  

Specifically, lag = the position of fully replicated logs - the position of consumed records on topic/partition level.  

<div style="text-align:center"><img src= "{{ "/img/projects/burrow/lag_intro.png " | prepend: site.baseurl }}" style="width: 100%; margin-left: 0%; margin-right: 0%;"></div>
Kafka Consumer Lag is the indicator of how much lag there is between Kafka producers and consumers. You can think of a Kafka Broker as a Kafka server. A Broker is what actually stores and serves Kafka messages. Kafka Producers are applications that write messages into Kafka (Brokers). Kafka Consumers are applications that read messages from Kafka (Brokers).  
### What is Burrow from Linkedin
Burrow is a monitoring companion for Apache Kafka that provides consumer lag checking as a service without the need for specifying thresholds.  

It monitors committed offsets for all consumers and calculates the status of those consumers on demand. An HTTP endpoint is provided to request status on demand, as well as provide other Kafka cluster information. There are also configurable notifiers that can send status out via email or HTTP calls to another service.  
 
Here is my inspection of Burrow source code <a href="https://github.com/HarbinZhang/goRainbow/tree/master/burrow" style="color: rgb(0,102,204)">Burrow Inspection</a>  

### Burrow Rainbow service
I am responsible for Burrow service, including Dockerfile, Ansible, Jenkinsfile for CICD, goRainbow and wavefront(metrics) dashboard.  

The main work involves goRainbow, which pulls information from Burrow, translates it into metrics, and sends them to Wavefront. 

I initially implemented a push-model rainbow (waiting for Burrow messages), but encountered stability issues with the Burrow notifier. After discussing with colleagues, I implemented a pull-model rainbow (actively pulling information from Burrow), which now works much more reliably.  

### goRainbow
goRainbow gets basic Kafka information, calculates needed data, translates it into metrics and sent to Wavefront(metrics dashboard).
It is an open source project, I am still working on enhancing it.  
<a href="https://github.com/HarbinZhang/goRainbow" style="color: rgb(0,102,204)">goRainbow github</a>
#### Structure
We mainly focus on go-Rainbow here. go-Rainbow needs to provide three functions:  

1. consumer handler: consumer side metrics. Includes: consumer lag, consumer offset, host/partition consuming speed, # of working consumers.
2. topic handler: topic related metrics. Includes: topic offset(producer offset), topic producing speed, # of working partitions(partition offset is increasing).
3. monitor: for monitoring burrow itself. Includes: metrics traffic, # of consumers, # of consumers with lag, # of different exceptions in each env.

##### Consumer handler structure
<div style="text-align:center"><img src= "{{ "/img/projects/burrow/consumer_handler_structure.png" | prepend: site.baseurl }}" style="width: 100%; margin-left: 0%; margin-right: 0%;"></div>
1. Each `consumer handler` is responsible for one consumer and has one specific url(`burrow/{cluster}/{consumer}`) to pull the consumer info from Burrow.
2. `alive consumers maintainer` checks Burrow periodically to see whether there is a new consumer or not. If so, it would raise a new `consumer handler` for the new consumer.
3. `consumer handler` would deregister itself in `alive consumers maintainer` when its consumer is not valid any longer.  

##### Topic handler structure
<div style="text-align:center"><img src= "{{ "/img/projects/burrow/topic_handler_structure.png" | prepend: site.baseurl }}" style="width: 100%; margin-left: 0%; margin-right: 0%;"></div>
It's similar to the Consumer structure.  

### Notable Features
1. Health-check: It provides a health-check HTTP service so that AWS can automatically restart Burrow-goRainbow when the service is unavailable.
2. ~~Dynamic metrics sending:~~ (update: I disabled this feature to simplify the project and trade-off for other features)
   1. It sends partition-level metrics when lag exists (lag > 0), otherwise doesn't send. This saves significant traffic.
   2. It guarantees every metric ends with 0, which behaves better in wavefront.
   3. It sends metrics per 30s when metrics change and per 60s for unchanged metrics.  
3. Traffic Statistics: goRainbow has traffic statistics, like the number of metrics sent, exceptions etc.
4. Traffic Savings Calculation: (saves at least 85% data traffic)  
As of March 2019, we have:
   1. 25 consumer groups are using our Kafka service.   
   2. 64 partitions for each topic.   
   3. Basically, 3 metrics for each partition level lag. (offset, startOffset, endOffset).  

- Without dynamic metrics sending, we should have sent 4950 metrics each time.  
(totalLagMetrics(1) + maxLagPartitionMetrics(5) + allPartitionsMetrics(64*3)) * consumers(25) = 4950 metrics each time. 
- With dynamic metrics sending, we should have sent 726 metrics each time.  
(totalLagMetrics(1) + maxLagPartitionMetrics(5) + allPartitionsMetrics(64*3)) * consumersWithLag(3) +  
  (totalLagMetrics(1) + maxLagPartitionMetrics(5)) * consumersWithoutLag(22) = 726
- In conclusion, we can save at least 85% data traffic for consumer lag metrics, because consumers are not having lag all the time and only partitions with lag would send metrics.
<div style="text-align:center"><img src= "{{ "/img/projects/burrow/dynamicTraffic.png" | prepend: site.baseurl }}" style="width: 100%; margin-left: 0%; margin-right: 0%;"></div>

### Link
<a href="https://github.com/HarbinZhang/goRainbow" style="color: rgb(0,102,204)">More details</a>
