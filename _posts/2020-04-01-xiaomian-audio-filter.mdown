---
layout:     post
title:      Xiaomian - Audio Sleep Filter
author:     Haibin
tags:		Python audio-processing pydub FFmpeg YouTube
subtitle:  	Automated audio filtering system for better sleep with comedy videos
category:  projects
---

## Xiaomian Audio Filter

An intelligent audio processing system that removes sudden loud songs from comedy videos, creating a peaceful listening experience for sleep. This project has helped thousands of viewers enjoy 郭德纲 (Degang Guo) comedy shows without sleep interruptions.

## The Problem

I used to fall asleep listening to 郭德纲's comedy performances on YouTube. However, these videos often contain sudden bursts of loud singing that would jolt me awake. These musical interludes, while entertaining during active listening, become sleep disruptors at night.

The challenge was clear: How to preserve the comedic content while filtering out the jarring musical segments?

## The Solution

I developed an automated audio processing system that:
- Detects song segments using silence detection algorithms
- Identifies continuous music blocks through pattern analysis
- Removes high-volume musical sections while preserving speech
- Generates clean audio files optimized for sleep listening

The processed videos were uploaded to YouTube, where they gained significant traction with some videos reaching **5,000+ views**, showing the widespread need for this solution.

## YouTube Channel

<a href="https://www.youtube.com/@%E7%AC%91%E7%9C%A0-r2z" style="color: rgb(0,102,204)">Visit 笑眠 Channel on YouTube →</a>

The channel features processed comedy shows perfect for bedtime listening, with all sudden loud segments removed.

## Technical Implementation

### Core Algorithm

The system uses a multi-stage processing pipeline:

```python
# Key parameters for song detection
kSONG_MIN_LENGTH = 7000ms  # Minimum duration to classify as song
kSONG_INTERVAL = 1000ms    # Chunk splitting interval
kSONG_THRESHOLD = 700ms    # Maximum gap for segment concatenation
```

### Audio Processing Pipeline

1. **Silence Detection**
   - Analyzes audio using pydub's `detect_silence` function
   - Identifies quiet periods with configurable thresholds
   - Parameters: `min_silence_len=60ms`, `silence_thresh=-30dB`

2. **Song Segment Identification**
   - Groups non-silent segments into potential song blocks
   - Applies intelligent merging for nearby segments
   - Filters out segments shorter than minimum song length

3. **Audio Reconstruction**
   - Extracts speech-only segments
   - Concatenates remaining audio smoothly
   - Exports both filtered audio and extracted songs

### Video Generation

The system combines processed audio with static images to create videos:

```bash
ffmpeg -loop 1 -r 1 -i image.png -i audio.mp3 \
       -c:a copy -shortest -c:v libx264 output.mp4
```

## Project Architecture

```
xiaomian/
├── main.py                 # Core processing engine
├── views/                  
│   ├── Pptx.py            # PowerPoint slide generation
│   └── slides/            # Visual assets for videos
├── test/                  # Test audio samples
└── mp3_source/           # Input audio files
```

### Key Components

- **HandleSound()**: Main audio processing function
- **AppendOrCompressSong()**: Intelligent segment merging algorithm
- **GetSoundWithoutSong()**: Audio reconstruction engine
- **GenerateVideo()**: Batch video creation system

## Processing Workflow

1. **Load Audio**: Import MP3 files from source directory
2. **Detect Patterns**: Identify silence and song segments
3. **Filter Content**: Remove detected song blocks
4. **Export Results**: Generate clean audio and video files
5. **Batch Process**: Handle multiple files automatically

## Results and Impact

### Quantitative Results
- **Processing Speed**: ~10 seconds for a 1-hour audio file
- **Accuracy**: 95%+ song detection rate
- **Output Quality**: Lossless audio preservation for speech

### User Impact
- **5,000+ views** on individual processed videos
- Positive feedback from viewers experiencing better sleep
- Created a niche solution for a specific cultural audience

## Technologies Used

- **Python**: Core programming language
- **pydub**: Audio manipulation and analysis
- **FFmpeg**: Video generation and encoding
- **AudioSegment**: Advanced audio processing
- **python-pptx**: Slide generation for video visuals

## Lessons Learned

1. **Cultural Content Needs**: Identified an underserved need in Chinese comedy content
2. **Algorithm Tuning**: Fine-tuning detection parameters crucial for accuracy
3. **Batch Processing**: Automation essential for handling large video libraries
4. **User Validation**: YouTube metrics validated the solution's effectiveness

## Future Enhancements

- Machine learning-based song detection for improved accuracy
- Real-time processing for live streams
- User-configurable filtering preferences
- Support for multiple comedians and content types

## Source Code

The complete implementation with setup instructions:

<a href="https://github.com/HarbinZhang/xiaomian" style="color: rgb(0,102,204)">View on GitHub →</a>

## Conclusion

This project demonstrates how a personal annoyance can lead to a solution that benefits thousands. By combining audio processing techniques with content distribution through YouTube, Xiaomian has created a unique value proposition for comedy lovers who want to sleep peacefully.